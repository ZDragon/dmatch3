#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const { optimizeAudio } = require('./optimize-audio');

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (!fs.existsSync('package.json')) {
  console.error('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.');
  process.exit(1);
}

try {
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É
  console.log('üßπ –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É...');
  execSync('npm run clean', { stdio: 'inherit' });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
  execSync('npm install', { stdio: 'inherit' });

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
  console.log('üéµ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã...');
  const audioInfo = optimizeAudio();

  // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  console.log('üî® –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω...');
  execSync('npm run build', { stdio: 'inherit' });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±–æ—Ä–∫–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å
  if (!fs.existsSync('dist')) {
    console.error('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏.');
    process.exit(1);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏
  const distSize = getDirectorySize('dist');
  console.log(`üìä –†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏: ${formatBytes(distSize)}`);
  console.log(`üéµ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: ${audioInfo.totalSizeFormatted} (${audioInfo.files} —Ñ–∞–π–ª–æ–≤)`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ dist
  console.log('üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist:');
  showDirectoryContents('dist');

  console.log('‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist/ –Ω–∞ –≤–∞—à –≤–µ–±-—Å–µ—Ä–≤–µ—Ä');
  console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç gzip –∏ brotli —Å–∂–∞—Ç–∏–µ');
  console.log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤');
  console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:', error.message);
  process.exit(1);
}

function getDirectorySize(dirPath) {
  let totalSize = 0;
  
  function calculateSize(currentPath) {
    const items = fs.readdirSync(currentPath);
    
    for (const item of items) {
      const itemPath = path.join(currentPath, item);
      const stats = fs.statSync(itemPath);
      
      if (stats.isDirectory()) {
        calculateSize(itemPath);
      } else {
        totalSize += stats.size;
      }
    }
  }
  
  calculateSize(dirPath);
  return totalSize;
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function showDirectoryContents(dirPath, indent = '') {
  const items = fs.readdirSync(dirPath);
  
  for (const item of items) {
    const itemPath = path.join(dirPath, item);
    const stats = fs.statSync(itemPath);
    
    if (stats.isDirectory()) {
      console.log(`${indent}üìÅ ${item}/`);
      showDirectoryContents(itemPath, indent + '  ');
    } else {
      const size = formatBytes(stats.size);
      console.log(`${indent}üìÑ ${item} (${size})`);
    }
  }
} 