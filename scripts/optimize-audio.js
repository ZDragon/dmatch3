#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üéµ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...');

const audioDir = path.join(__dirname, '../assets/audio');
const audioFiles = ['background.wav', 'click.wav', 'match.wav'];

function getFileSize(filePath) {
  const stats = fs.statSync(filePath);
  return stats.size;
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function checkAudioFiles() {
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã...');
  
  let totalSize = 0;
  
  audioFiles.forEach(file => {
    const filePath = path.join(audioDir, file);
    
    if (fs.existsSync(filePath)) {
      const size = getFileSize(filePath);
      totalSize += size;
      console.log(`‚úÖ ${file}: ${formatBytes(size)}`);
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
      if (size > 10 * 1024 * 1024) { // > 10MB
        console.log(`‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: ${file} –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (${formatBytes(size)})`);
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ');
      }
    } else {
      console.log(`‚ùå ${file}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: ${formatBytes(totalSize)}`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  if (totalSize > 25 * 1024 * 1024) { // > 25MB
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log('   1. –°–Ω–∏–∑—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 44kHz –¥–æ 22kHz)');
    console.log('   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç MP3 –≤–º–µ—Å—Ç–æ WAV –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏');
    console.log('   3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
    console.log('   4. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏');
  }
  
  return totalSize;
}

function createAudioManifest() {
  console.log('üìù –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...');
  
  const manifest = {
    audio: {},
    totalSize: 0,
    generated: new Date().toISOString()
  };
  
  audioFiles.forEach(file => {
    const filePath = path.join(audioDir, file);
    
    if (fs.existsSync(filePath)) {
      const size = getFileSize(filePath);
      manifest.audio[file] = {
        size: size,
        sizeFormatted: formatBytes(size),
        path: `assets/audio/${file}`
      };
      manifest.totalSize += size;
    }
  });
  
  manifest.totalSizeFormatted = formatBytes(manifest.totalSize);
  
  const manifestPath = path.join(__dirname, '../dist/audio-manifest.json');
  fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
  
  console.log(`‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: ${manifestPath}`);
  return manifest;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function optimizeAudio() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∞—É–¥–∏–æ
    if (!fs.existsSync(audioDir)) {
      console.error('‚ùå –ü–∞–ø–∫–∞ assets/audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    const totalSize = checkAudioFiles();
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç (–µ—Å–ª–∏ –ø–∞–ø–∫–∞ dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const distPath = path.join(__dirname, '../dist');
    if (fs.existsSync(distPath)) {
      createAudioManifest();
    }
    
    console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
    return {
      totalSize,
      totalSizeFormatted: formatBytes(totalSize),
      files: audioFiles.length
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  optimizeAudio();
}

module.exports = { optimizeAudio, formatBytes }; 